@startuml
set namespaceSeparator ::

class Kratos::LinearSolver <TSparseSpaceType TDenseSpaceType TReordererType> {
+ void Initialize(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::VectorType & rX, Kratos::LinearSolver::VectorType & rB)
+ void InitializeSolutionStep(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::VectorType & rX, Kratos::LinearSolver::VectorType & rB)
+ void PerformSolutionStep(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::VectorType & rX, Kratos::LinearSolver::VectorType & rB)
+ void FinalizeSolutionStep(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::VectorType & rX, Kratos::LinearSolver::VectorType & rB)
+ void Clear()
+ _Bool Solve(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::VectorType & rX, Kratos::LinearSolver::VectorType & rB)
+ _Bool Solve(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::DenseMatrixType & rX, Kratos::LinearSolver::DenseMatrixType & rB)
+ void Solve(Kratos::LinearSolver::SparseMatrixType & K, Kratos::LinearSolver::SparseMatrixType & M, Kratos::LinearSolver::DenseVectorType & Eigenvalues, Kratos::LinearSolver::DenseMatrixType & Eigenvectors)
+ _Bool AdditionalPhysicalDataIsNeeded()
+ void ProvideAdditionalData(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::VectorType & rX, Kratos::LinearSolver::VectorType & rB, int & rDoFSet, int & rModelPart)
+ typename TReordererType::Pointer GetReorderer()
+ void SetReorderer(typename TReordererType::Pointer pNewReorderer)
+ void SetTolerance(double NewTolerance)
+ double GetTolerance()
+ Kratos::LinearSolver::IndexType GetIterationsNumber()
+ _Bool IsConsistent(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::VectorType & rX, Kratos::LinearSolver::VectorType & rB)
+ _Bool IsConsistent(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::DenseMatrixType & rX, Kratos::LinearSolver::DenseMatrixType & rB)
+ _Bool IsNotConsistent(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::VectorType & rX, Kratos::LinearSolver::VectorType & rB)
+ _Bool IsNotConsistent(Kratos::LinearSolver::SparseMatrixType & rA, Kratos::LinearSolver::DenseMatrixType & rX, Kratos::LinearSolver::DenseMatrixType & rB)
+ int Info()
+ void PrintInfo(int & rOStream)
+ void PrintData(int & rOStream)
}

class Kratos::Reorderer <TSparseSpaceType TDenseSpaceType> {
+ void Initialize(Kratos::Reorderer::SparseMatrixType & rA, Kratos::Reorderer::VectorType & rX, Kratos::Reorderer::VectorType & rB)
+ void Reorder(Kratos::Reorderer::SparseMatrixType & rA, Kratos::Reorderer::VectorType & rX, Kratos::Reorderer::VectorType & rB)
+ void InverseReorder(Kratos::Reorderer::SparseMatrixType & rA, Kratos::Reorderer::VectorType & rX, Kratos::Reorderer::VectorType & rB)
+ Kratos::Reorderer::IndexVectorType & CalculateIndexPermutation(Kratos::Reorderer::SparseMatrixType & rA, Kratos::Reorderer::IndexType InitialIndex)
+ Kratos::Reorderer::IndexVectorType & GetIndexPermutation()
+ int Info()
+ void PrintInfo(int & rOStream)
+ void PrintData(int & rOStream)
}

@enduml
